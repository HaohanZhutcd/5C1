#! C:/Program Files/Nuke13.1v2/nuke-13.1.2.dll -nx
version 13.1 v2
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="0" w="1917" h="1008" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1254" stretch="1"/>
            <splitter orientation="2">
                <split size="567"/>
                <dock id="" activePageId="Viewer.3">
                    <page id="Viewer.2"/>
                    <page id="Viewer.1"/>
                    <page id="Viewer.3"/>
                </dock>
                <split size="399"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name C:/Users/zhuha/Desktop/lab2_pipeline.nk
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 monitorOutLUT rec709
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
BackdropNode {
 inputs 0
 name BackdropNode1
 tile_color 0x71c67100
 label "Validation Test"
 note_font_size 42
 xpos -159
 ypos -148
 bdwidth 331
 bdheight 299
}
BackdropNode {
 inputs 0
 name BackdropNode6
 tile_color 0x71c67100
 label "Validation Test"
 note_font_size 42
 xpos 774
 ypos 88
 bdwidth 331
 bdheight 299
}
StickyNote {
 inputs 0
 name StickyNote5
 label "The output must be green\nif the computation of the avg\nis correct for the golden image."
 xpos 945
 ypos 302
}
Read {
 inputs 0
 file_type exr
 file C:/Users/zhuha/Desktop/goldenImage(1).exr
 format "256 256 0 0 256 256 1 square_256"
 origset true
 name Read3
 xpos -428
 ypos -231
}
BlinkScript {
 recompileCount 7
 ProgramGroup 1
 KernelDescription "2 \"BoxFilterKernel\" iterate componentWise c9f8a58d4abfa504a1ac79020ca25493f62c72f4f3c72cd647d4454ab6d4125e 2 \"src\" Read Random \"dst\" Write Point 1 \"Box size\" Int 1 AAEAAA== 1 \"size\" 1 1 2 \"hSize\" Int 1 1 AAAAAA== \"normalisation\" Float 1 1 AAAAAA=="
 kernelSource "kernel BoxFilterKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n param:\n int size;\n local:\n int hSize; // half size\n float normalisation; // Number of pixels in the box\n // Defines user parameters\n void define() \{\n defineParam(size, \"Box size\", 256);\n \}\n void init() \{\n hSize = size / 2;\n normalisation = float(size * size);\n \}\n \n // pos gives the position of the kernel in the output image\n void process(int2 pos) \{\n // Read the input image\n float sum = 0;\n for(int k = 0; k <= size; k++) \{\n for(int l = 0; l <= size; l++) \{\n sum += src(pos.x + l, pos.y + k);\n \}\n \}\n // Write the result to the output image\n dst() = sum / normalisation;\n \}\n\};\n"
 rebuild ""
 format "256 256 0 0 256 256 1 new256"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript79
 xpos -428
 ypos -102
}
set N35249000 [stack 0]
BlinkScript {
 recompileCount 5
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise f175d8e60d13dd42b57c3c7c03bddeb41b40f623d864e16e38d2b965c3f6702d 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 256*x;\n int yIn = 256*y;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "1 1 0 0 1 1 1 new1"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript80
 xpos -351
 ypos -36
}
set N35248c00 [stack 0]
Dot {
 name Dot10
 label Input
 note_font_size 32
 note_font_color 0xff
 xpos -45
 ypos -79
}
Reformat {
 format "2048 1080 0 0 2048 1080 1 2K_DCP"
 filter impulse
 name Reformat2
 xpos -79
 ypos -41
}
Group {
 name checkKernel1
 xpos -79
 ypos 4
 addUserKnob {20 checkKernel}
 addUserKnob {41 "Local GPU: " T BlinkScript4.gpuName}
 addUserKnob {41 "Use GPU if Available" T BlinkScript4.useGPUIfAvailable}
 addUserKnob {26 ""}
}
 Input {
  inputs 0
  name Input1
  xpos -3100
  ypos 1252
 }
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"checkKernel\" iterate pixelWise dbcaedd53032862306cf846fe83d493b3192e011217662159f486e7e2c839bcf 2 \"src\" Read Point \"dst\" Write Point 0 0 1 \"mu\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA=="
  EncodedSource "1 680 yUR59vt7auTe9yVDGsfV3gdB6/9C2Q3qLY3097Dq+fKe1vrBxSjwQPi6gfZ3u71AeisF6AxWoPmFUlXrpSfEVA4AUPPBmAweN+uTegETo1vzz9gWJY//SbojsyX8MzLqfLxTW0oxBf10rtZ4EXCz8HnjDzm3cVFznaWbB7iu6AuTzNvLj+HwRqP4LyXmbQBKxIuMnSlvAl9wTj9Rxcv8o+yO2fbrpUA7B2M4b60WBOSwbAuHeSx50qOtTVvnsFDEs41bBp78MFQ054f8lpoPPzmS0FUi1CDXV96uOsosAYWr0W1S56bHvvm0HJMks4MPb4LDNGprQJdI9RpCfjwGBs/ofnfa/pn+Wo5JKyP3BjBndyCRhABkh2N4UtP+4klpjQhQlJjcv2eB/ZnRGOc48iUspqgXbkNkzCNpW/OlByVH8tQVsFr5IdEYkGB8rpr46AN3nP7trK+x2R46xwsttpq0fAmiTEV+MRGzokDKOvLuIPHUBvznOcAk0d/DPThOoCvLTdrHl9P6lOrP5YTBVszh7m8YKtj8/ErMAMxOGqUhAmmuwBVggA3WZcW73+tUz13RTIMvTvwt5DHiq/rCzcyLO+CsSP416mr+bRmdiVJU0EkEWLw77NPl0G5z4a5SVEr/y1fRoOPdXEM0By4XjmlikcKLxAujzpgJr0MmwTB8gy8yzqO3Uu+qxcHH3qknemnrj0zSkWSV4d33NbHlQO1M6f8POCyHFAr6uW4xcHhW7hKw3Z3XvM/rAFXZw2DxaTVlGo6frHQZ+j9bCWPghIxrIA/LO6u7U4XidUfUnwv4k0wL/ZkHt/nvJVGaQOXjkeFrTwVU8aaTgy+arF5q2gOQEAFSXUXE0mdZoR5e8BMmLHd2Sf5dmKbblKHchJyPWNKDyd+w9veLVWxLIf9enQ=="
  rebuild ""
  protectKernelWhenPublishing true
  rebuild_finalise ""
  name BlinkScript4
  xpos -3100
  ypos 1292
 }
 Output {
  name Output1
  xpos -3100
  ypos 1392
 }
end_group
PostageStamp {
 name PostageStamp2
 xpos -79
 ypos 47
 postage_stamp true
}
StickyNote {
 inputs 0
 name StickyNote1
 label "The output must be green\nif the computation of the avg\nis correct for the golden image."
 xpos 12
 ypos 66
}
Read {
 inputs 0
 file_type exr
 file C:/Users/zhuha/Desktop/goldenImage(1).exr
 format "256 256 0 0 256 256 1 square_256"
 origset true
 name Read2
 xpos 375
 ypos -406
}
set N35176400 [stack 0]
BlinkScript {
 recompileCount 7
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise 881bfe3749955c03924e35ba880430e604be61b94d82171bcbc6e699559a0152 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 2*x + 1;\n int yIn = 2*y + 1;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "128 128 0 0 128 128 1 new128"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript77
 xpos 650
 ypos -258
}
BlinkScript {
 recompileCount 2
 ProgramGroup 1
 KernelDescription "2 \"BoxFilterKernel\" iterate componentWise cec1cb529a49f309a56c86309822396b3b6044aa1b969b11a3724ccfb5651ff3 2 \"src\" Read Random \"dst\" Write Point 1 \"Box size\" Int 1 gAAAAA== 1 \"size\" 1 1 2 \"hSize\" Int 1 1 AAAAAA== \"normalisation\" Float 1 1 AAAAAA=="
 kernelSource "kernel BoxFilterKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n param:\n int size;\n local:\n int hSize; // half size\n float normalisation; // Number of pixels in the box\n // Defines user parameters\n void define() \{\n defineParam(size, \"Box size\", 128);\n \}\n void init() \{\n hSize = size / 2;\n normalisation = float(size * size);\n \}\n \n // pos gives the position of the kernel in the output image\n void process(int2 pos) \{\n // Read the input image\n float sum = 0;\n for(int k = 0; k <= size; k++) \{\n for(int l = 0; l <= size; l++) \{\n sum += src(pos.x + l, pos.y + k);\n \}\n \}\n // Write the result to the output image\n dst() = sum / normalisation;\n \}\n\};"
 rebuild ""
 rebuild_finalise ""
 name BlinkScript83
 xpos 673
 ypos -149
}
set N35175800 [stack 0]
push $N35176400
BlinkScript {
 recompileCount 3
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise ef358aff8ab56dfec8f5723ab38d8059fed840cc029f6334aa7949d5a10db85a 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 2*x;\n int yIn = 2*y + 1;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "128 128 0 0 128 128 1 new128"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript76
 xpos 515
 ypos -264
}
BlinkScript {
 recompileCount 3
 ProgramGroup 1
 KernelDescription "2 \"BoxFilterKernel\" iterate componentWise cec1cb529a49f309a56c86309822396b3b6044aa1b969b11a3724ccfb5651ff3 2 \"src\" Read Random \"dst\" Write Point 1 \"Box size\" Int 1 gAAAAA== 1 \"size\" 1 1 2 \"hSize\" Int 1 1 AAAAAA== \"normalisation\" Float 1 1 AAAAAA=="
 kernelSource "kernel BoxFilterKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n param:\n int size;\n local:\n int hSize; // half size\n float normalisation; // Number of pixels in the box\n // Defines user parameters\n void define() \{\n defineParam(size, \"Box size\", 128);\n \}\n void init() \{\n hSize = size / 2;\n normalisation = float(size * size);\n \}\n \n // pos gives the position of the kernel in the output image\n void process(int2 pos) \{\n // Read the input image\n float sum = 0;\n for(int k = 0; k <= size; k++) \{\n for(int l = 0; l <= size; l++) \{\n sum += src(pos.x + l, pos.y + k);\n \}\n \}\n // Write the result to the output image\n dst() = sum / normalisation;\n \}\n\};"
 rebuild ""
 rebuild_finalise ""
 name BlinkScript82
 xpos 536
 ypos -142
}
set N35175000 [stack 0]
push 0
push $N35176400
BlinkScript {
 recompileCount 6
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise 206411de571c1ab3b8cd487eb619768b1c8fe7797c10c2491425b3a9d13fc968 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 2*x;\n int yIn = 2*y;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "128 128 0 0 128 128 1 new128"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript74
 xpos 225
 ypos -266
}
BlinkScript {
 recompileCount 2
 ProgramGroup 1
 KernelDescription "2 \"BoxFilterKernel\" iterate componentWise cec1cb529a49f309a56c86309822396b3b6044aa1b969b11a3724ccfb5651ff3 2 \"src\" Read Random \"dst\" Write Point 1 \"Box size\" Int 1 gAAAAA== 1 \"size\" 1 1 2 \"hSize\" Int 1 1 AAAAAA== \"normalisation\" Float 1 1 AAAAAA=="
 kernelSource "kernel BoxFilterKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n param:\n int size;\n local:\n int hSize; // half size\n float normalisation; // Number of pixels in the box\n // Defines user parameters\n void define() \{\n defineParam(size, \"Box size\", 128);\n \}\n void init() \{\n hSize = size / 2;\n normalisation = float(size * size);\n \}\n \n // pos gives the position of the kernel in the output image\n void process(int2 pos) \{\n // Read the input image\n float sum = 0;\n for(int k = 0; k <= size; k++) \{\n for(int l = 0; l <= size; l++) \{\n sum += src(pos.x + l, pos.y + k);\n \}\n \}\n // Write the result to the output image\n dst() = sum / normalisation;\n \}\n\};"
 rebuild ""
 rebuild_finalise ""
 name BlinkScript78
 xpos 201
 ypos -156
}
set N35174800 [stack 0]
push $N35176400
BlinkScript {
 recompileCount 4
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise bd75e046d57bccffc831b49140f4a2e58924af26a3ef3b4c0e6b5cdf07a21fa9 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 2*x + 1;\n int yIn = 2*y;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "128 128 0 0 128 128 1 new128"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript75
 xpos 382
 ypos -259
}
BlinkScript {
 recompileCount 3
 ProgramGroup 1
 KernelDescription "2 \"BoxFilterKernel\" iterate componentWise cec1cb529a49f309a56c86309822396b3b6044aa1b969b11a3724ccfb5651ff3 2 \"src\" Read Random \"dst\" Write Point 1 \"Box size\" Int 1 gAAAAA== 1 \"size\" 1 1 2 \"hSize\" Int 1 1 AAAAAA== \"normalisation\" Float 1 1 AAAAAA=="
 kernelSource "kernel BoxFilterKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n param:\n int size;\n local:\n int hSize; // half size\n float normalisation; // Number of pixels in the box\n // Defines user parameters\n void define() \{\n defineParam(size, \"Box size\", 128);\n \}\n void init() \{\n hSize = size / 2;\n normalisation = float(size * size);\n \}\n \n // pos gives the position of the kernel in the output image\n void process(int2 pos) \{\n // Read the input image\n float sum = 0;\n for(int k = 0; k <= size; k++) \{\n for(int l = 0; l <= size; l++) \{\n sum += src(pos.x + l, pos.y + k);\n \}\n \}\n // Write the result to the output image\n dst() = sum / normalisation;\n \}\n\};"
 rebuild ""
 rebuild_finalise ""
 name BlinkScript81
 xpos 373
 ypos -153
}
set N40bc00 [stack 0]
Merge2 {
 inputs 4+1
 operation plus
 name Merge1
 xpos 424
 ypos -23
}
set N40b800 [stack 0]
Expression {
 expr0 "r / 4.0"
 expr1 g/4.0
 expr2 b/4.0
 expr3 1
 name Expression1
 xpos 649
 ypos 4
}
set N40b400 [stack 0]
BlinkScript {
 recompileCount 22
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise 669d76261f0a6811443a841f74e74cb4f84842f1156c23626a2ba6ce2b24366c 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 128*x;\n int yIn = 128*y;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "1 1 0 0 1 1 1 new1"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript86
 xpos 878
 ypos -2
}
set N40b000 [stack 0]
push $N35248c00
Viewer {
 inputs 2
 frame_range 1-100
 name Viewer7
 xpos 190
 ypos 383
}
push $N35248c00
push $N40b800
Viewer {
 inputs 2
 frame_range 1-100
 input_number 1
 name Viewer4
 xpos 234
 ypos 194
}
push $N40b400
push $N35248c00
push $N35249000
Viewer {
 inputs 3
 frame_range 1-100
 name Viewer6
 xpos 183
 ypos 124
}
push $N35249000
push $N35248c00
Viewer {
 inputs 2
 frame_range 1-100
 name Viewer2
 xpos -430
 ypos 61
}
push $N40b800
BlinkScript {
 recompileCount 20
 ProgramGroup 1
 KernelDescription "2 \"BoxFilterKernel\" iterate componentWise cec1cb529a49f309a56c86309822396b3b6044aa1b969b11a3724ccfb5651ff3 2 \"src\" Read Random \"dst\" Write Point 1 \"Box size\" Int 1 gAAAAA== 1 \"size\" 1 1 2 \"hSize\" Int 1 1 AAAAAA== \"normalisation\" Float 1 1 AAAAAA=="
 kernelSource "kernel BoxFilterKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n param:\n int size;\n local:\n int hSize; // half size\n float normalisation; // Number of pixels in the box\n // Defines user parameters\n void define() \{\n defineParam(size, \"Box size\", 128);\n \}\n void init() \{\n hSize = size / 2;\n normalisation = float(size * size);\n \}\n \n // pos gives the position of the kernel in the output image\n void process(int2 pos) \{\n // Read the input image\n float sum = 0;\n for(int k = 0; k <= size; k++) \{\n for(int l = 0; l <= size; l++) \{\n sum += src(pos.x + l, pos.y + k);\n \}\n \}\n // Write the result to the output image\n dst() = sum / normalisation;\n \}\n\};"
 rebuild ""
 rebuild_finalise ""
 name BlinkScript84
 xpos 444
 ypos 75
}
Expression {
 expr3 1
 name Expression2
 xpos 444
 ypos 127
}
BlinkScript {
 recompileCount 16
 ProgramGroup 1
 KernelDescription "2 \"reduceKernel\" iterate componentWise 669d76261f0a6811443a841f74e74cb4f84842f1156c23626a2ba6ce2b24366c 2 \"src\" Read Random \"dst\" Write Point 0 0 0"
 kernelSource "kernel reduceKernel : ImageComputationKernel<eComponentWise>\n\{\n Image<eRead, eAccessRandom, eEdgeClamped> src; // the input image\n Image<eWrite> dst; // the output image\n void process(int2 pos) \{\n // Output position\n int x = pos.x;\n int y = pos.y;\n // Input position\n int xIn = 128*x;\n int yIn = 128*y;\n // Read the input image\n float input = src(xIn, yIn);\n // Write the result to the output image\n dst() = input;\n \}\n\};"
 rebuild ""
 format "1 1 0 0 1 1 1 new1"
 specifiedFormat true
 rebuild_finalise ""
 name BlinkScript85
 xpos 444
 ypos 174
}
Viewer {
 frame_range 1-100
 name Viewer8
 xpos 241
 ypos 270
}
push $N40b000
Dot {
 name Dot1
 label Input
 note_font_size 32
 note_font_color 0xff
 xpos 888
 ypos 157
}
Reformat {
 format "2048 1080 0 0 2048 1080 1 2K_DCP"
 filter impulse
 name Reformat1
 xpos 854
 ypos 195
}
Group {
 name checkKernel3
 xpos 854
 ypos 240
 addUserKnob {20 checkKernel}
 addUserKnob {41 "Local GPU: " T BlinkScript4.gpuName}
 addUserKnob {41 "Use GPU if Available" T BlinkScript4.useGPUIfAvailable}
 addUserKnob {26 ""}
}
 Input {
  inputs 0
  name Input1
  xpos -3100
  ypos 1252
 }
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"checkKernel\" iterate pixelWise dbcaedd53032862306cf846fe83d493b3192e011217662159f486e7e2c839bcf 2 \"src\" Read Point \"dst\" Write Point 0 0 1 \"mu\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA=="
  EncodedSource "1 680 yUR59vt7auTe9yVDGsfV3gdB6/9C2Q3qLY3097Dq+fKe1vrBxSjwQPi6gfZ3u71AeisF6AxWoPmFUlXrpSfEVA4AUPPBmAweN+uTegETo1vzz9gWJY//SbojsyX8MzLqfLxTW0oxBf10rtZ4EXCz8HnjDzm3cVFznaWbB7iu6AuTzNvLj+HwRqP4LyXmbQBKxIuMnSlvAl9wTj9Rxcv8o+yO2fbrpUA7B2M4b60WBOSwbAuHeSx50qOtTVvnsFDEs41bBp78MFQ054f8lpoPPzmS0FUi1CDXV96uOsosAYWr0W1S56bHvvm0HJMks4MPb4LDNGprQJdI9RpCfjwGBs/ofnfa/pn+Wo5JKyP3BjBndyCRhABkh2N4UtP+4klpjQhQlJjcv2eB/ZnRGOc48iUspqgXbkNkzCNpW/OlByVH8tQVsFr5IdEYkGB8rpr46AN3nP7trK+x2R46xwsttpq0fAmiTEV+MRGzokDKOvLuIPHUBvznOcAk0d/DPThOoCvLTdrHl9P6lOrP5YTBVszh7m8YKtj8/ErMAMxOGqUhAmmuwBVggA3WZcW73+tUz13RTIMvTvwt5DHiq/rCzcyLO+CsSP416mr+bRmdiVJU0EkEWLw77NPl0G5z4a5SVEr/y1fRoOPdXEM0By4XjmlikcKLxAujzpgJr0MmwTB8gy8yzqO3Uu+qxcHH3qknemnrj0zSkWSV4d33NbHlQO1M6f8POCyHFAr6uW4xcHhW7hKw3Z3XvM/rAFXZw2DxaTVlGo6frHQZ+j9bCWPghIxrIA/LO6u7U4XidUfUnwv4k0wL/ZkHt/nvJVGaQOXjkeFrTwVU8aaTgy+arF5q2gOQEAFSXUXE0mdZoR5e8BMmLHd2Sf5dmKbblKHchJyPWNKDyd+w9veLVWxLIf9enQ=="
  rebuild ""
  protectKernelWhenPublishing true
  rebuild_finalise ""
  name BlinkScript4
  xpos -3100
  ypos 1292
 }
 Output {
  name Output1
  xpos -3100
  ypos 1392
 }
end_group
PostageStamp {
 name PostageStamp1
 xpos 854
 ypos 283
 postage_stamp true
}
push $N35175800
push $N35175000
push $N40bc00
push $N35174800
Viewer {
 inputs 4
 frame_range 1-100
 input_number 2
 name Viewer5
 xpos 236
 ypos -51
}
push $N40b000
Viewer {
 frame_range 1-100
 name Viewer1
 xpos 1075
 ypos 29
}
